#version 430

layout (local_size_x = 16, local_size_y = 16) in;

layout (rgba32f, binding = 0) uniform image2D outputImage;

uniform ivec2 chunkStartPos;  // World start pos of the chunk (in blocks)
uniform float scale;          // Noise scale (frequency)

// --- Simplex noise functions start ---

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);
}

float simplexNoise(vec2 v) {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec2 x1 = x0.xy - i1 + C.xx;
  vec2 x2 = x0.xy - 1.0 + 2.0 * C.xx;

  i = mod289(i);
  vec3 p = permute( permute(i.y + vec3(0.0, i1.y, 1.0))
      + i.x + vec3(0.0, i1.x, 1.0));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);
  m = m*m ;
  m = m*m ;

  vec3 x = 2.0 * fract(p * C.w) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

  vec2 g0 = vec2(a0.x, h.x);
  vec2 g1 = vec2(a0.y, h.y);
  vec2 g2 = vec2(a0.z, h.z);

  float n0 = dot(g0, x0);
  float n1 = dot(g1, x1);
  float n2 = dot(g2, x2);

  return 70.0 * dot(m, vec3(n0, n1, n2));
}
// --- Simplex noise functions end ---

void main() {
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);
    ivec2 worldPos = chunkStartPos + id;

    float height = simplexNoise(vec2(worldPos) * scale);

    // Normalize noise output from approx [-1,1] to [0,1]
    height = height * 0.5 + 0.5;

    imageStore(outputImage, id, vec4(height, height, height, 1.0));
}
